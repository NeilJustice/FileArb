project(libFileArbTests)
include(${CMAKE_SOURCE_DIR}/CMakeMacros.cmake)

set(CMAKE_INCLUDE_CURRENT_DIR ON)
include_directories(${CMAKE_SOURCE_DIR})
include_directories(${ZenUnitAndMetalMockIncludeDirectory})
include_directories("${CMAKE_SOURCE_DIR}/BoostRegex/include")

folder_source_group(Components)
folder_source_group_subfolder(Components Args)
folder_source_group_subsubfolder(Components Args MetalMock)
folder_source_group_subfolder(Components Random)
folder_source_group_subsubfolder(Components Random MetalMock)
folder_source_group_subfolder(Components SubPrograms)
folder_source_group_subsubfolder(Components SubPrograms MetalMock)
folder_source_group(StaticUtilities)
folder_source_group_subfolder(UtilityComponents Console)
folder_source_group_subsubfolder(UtilityComponents Console MetalMock)
folder_source_group_subfolder(UtilityComponents Docopt)
folder_source_group_subsubfolder(UtilityComponents Docopt MetalMock)
folder_source_group_subfolder(UtilityComponents ErrorHandling)
folder_source_group_subsubfolder(UtilityComponents ErrorHandling MetalMock)
folder_source_group_subfolder(UtilityComponents Exception)
folder_source_group_subsubfolder(UtilityComponents Exception MetalMock)
folder_source_group_subfolder(UtilityComponents FileSystem)
folder_source_group_subsubfolder(UtilityComponents FileSystem MetalMock)
folder_source_group_subfolder(UtilityComponents FunctionCallers)
folder_source_group_subsubfolder(UtilityComponents FunctionCallers Member)
folder_source_group_subsubsubfolder(UtilityComponents FunctionCallers Member MetalMock)
folder_source_group_subfolder(UtilityComponents Misc)
folder_source_group_subsubfolder(UtilityComponents Misc MetalMock)
folder_source_group_subfolder(UtilityComponents Time)
folder_source_group_subsubfolder(UtilityComponents Time MetalMock)
folder_source_group_subsubfolder(UtilityComponents Time ZenUnit)
folder_source_group(ValueTypes)
folder_source_group_subfolder(ValueTypes ZenUnit)

file(GLOB_RECURSE Sources *.h *.cpp)
source_group("" FILES ${Sources})

if(MSVC)
   link_directories(libFileArbTests "${CMAKE_SOURCE_DIR}/BoostRegex/Windows/lib")
endif()
add_executable(libFileArbTests ${Sources})

if(UNIX)
   target_link_libraries(libFileArbTests libFileArb "${CMAKE_SOURCE_DIR}/BoostRegex/Linux/lib/libboost_regex.a")
   if(CodeCovMode)
     target_link_libraries(libFileArbTests CodeCovLibraryInterface)
   endif()
elseif(MSVC)
   target_link_libraries(libFileArbTests libFileArb)
endif()

EnablePrecompiledHeadersIfMSVC()
IfMSVCAddRunTestsPostBuildStep()

